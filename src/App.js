import './App.css';
import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useMemo } from 'react'
import { Canvas, useThree, useFrame, extend } from '@react-three/fiber'
import { useGLTF, Stage } from '@react-three/drei'
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'
import { AdditiveBlendingShader, VolumetricLightShader } from './shaders'


extend({ EffectComposer, RenderPass, ShaderPass })

const DEFAULT_LAYER = 0
const OCCLUSION_LAYER = 1

// Component auto-generated by GLTFJSX: https://github.com/react-spring/gltfjsx
function Elf({ layer = DEFAULT_LAYER }) {
  const group = useRef()
  const { nodes } = useGLTF('/scene.gltf')

  console.log("another: ",nodes);

  const material = useMemo(() => {
    if (layer === DEFAULT_LAYER) return new THREE.MeshStandardMaterial({ color: new THREE.Color('#2a2a2a'), roughness: 1, metalness: 0.9 })
    else return new THREE.MeshBasicMaterial({ color: new THREE.Color('black') })
  }, [layer])

  useFrame(() => (group.current.rotation.y += 0.004))

  return (
    <group ref={group}>
      <group rotation={[-1.5707963267948963, 0, 0]} position={[0, 2, 0]}>
        <mesh geometry={nodes.mesh_0.geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
        <mesh geometry={nodes.mesh_1.geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
        <mesh geometry={nodes.mesh_2.geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
      </group>
    </group>
  )
}

// Component auto-generated by GLTFJSX: https://github.com/react-spring/gltfjsx
function Mashmello({ layer = DEFAULT_LAYER }) {
  const group = useRef()
  const { nodes } = useGLTF('/scene2.gltf')

  console.log("nodes: ",nodes);

  const material = useMemo(() => {
    if (layer === DEFAULT_LAYER) return new THREE.MeshStandardMaterial({ color: new THREE.Color('#2a2a2a'), roughness: 1, metalness: 0.9 })
    else return new THREE.MeshBasicMaterial({ color: new THREE.Color('black') })
  }, [layer])

  useFrame(() => (group.current.rotation.y += 0.004))

//   40_mesh1_01_16_16_40_mesh1_01_16_16_0: SkinnedMesh {uuid: 'F88B1DA1-170D-4700-854E-B631AFDF9571', name: '40_mesh1_01_16_16_40_mesh1_01_16_16_0', type: 'SkinnedMesh', parent: Object3D, children: Array(0), …}
// 40_mesh2_01_16_16_40_mesh2_01_16_16_0: SkinnedMesh {uuid: '4BAC19ED-216D-4315-8C0C-E1DEA7F51C18', name: '40_mesh2_01_16_16_40_mesh2_01_16_16_0', type: 'SkinnedMesh', parent: Object3D, children: Array(0), …}
// 40_mesh3_01_16_16_40_mesh3_01_16_16_0: SkinnedMesh {uuid: '7E90793E-7ED7-4FD0-BBA6-40B0432504C2', name: '40_mesh3_01_16_16_40_mesh3_01_16_16_0', type: 'SkinnedMesh', parent: Object3D, children: Array(0), …}
// 40_mesh5_01_16_16_40_mesh5_01_16_16_0: SkinnedMesh {uuid: 'A8C1AD7C-B868-45D6-9696-F181949D669D', name: '40_mesh5_01_16_16_40_mesh5_01_16_16_0', type: 'SkinnedMesh', parent: Object3D, children: Array(0), …}
// 40_mesh6_01_16_16_40_mesh6_01_16_16_0:

  return (
    <group ref={group}>
      <group rotation={[-1.5707963267948963, 0, 0]} position={[0, 2, 0]}>
        <mesh geometry={nodes[0].geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
        <mesh geometry={nodes[1].geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
        <mesh geometry={nodes[2].geometry} material={material} layers={layer} receiveShadow castShadow></mesh>
      </group>
    </group>
  )
}



function Effects() {
  const { gl, scene, camera, size } = useThree()
  const occlusionRenderTarget = useMemo(() => new THREE.WebGLRenderTarget(), [])
  const occlusionComposer = useRef()
  const composer = useRef()

  useEffect(() => {
    occlusionComposer.current.setSize(size.width, size.height)
    composer.current.setSize(size.width, size.height)
  }, [size])

  useFrame(() => {
    camera.layers.set(OCCLUSION_LAYER)
    occlusionComposer.current.render()
    camera.layers.set(DEFAULT_LAYER)
    composer.current.render()
  }, 1)

  return (
    <>
      <mesh layers={OCCLUSION_LAYER} position={[1, 13, -10]}>
        <sphereBufferGeometry args={[3, 32, 32]} />
        <meshBasicMaterial />
      </mesh>
      <effectComposer ref={occlusionComposer} args={[gl, occlusionRenderTarget]} renderToScreen={false}>
        <renderPass attachArray="passes" args={[scene, camera]} />
        <shaderPass attachArray="passes" args={[VolumetricLightShader]} needsSwap={false} />
      </effectComposer>
      <effectComposer ref={composer} args={[gl]}>
        <renderPass attachArray="passes" args={[scene, camera]} />
        <shaderPass attachArray="passes" args={[AdditiveBlendingShader]} uniforms-tAdd-value={occlusionRenderTarget.texture} />
        <shaderPass attachArray="passes" args={[FXAAShader]} uniforms-resolution-value={[1 / size.width, 1 / size.height]} renderToScreen />
      </effectComposer>
    </>
  )
}

function App() {
  return (
    <div className="App">
      
      <div className=" h-screen">
        <Canvas shadows dpr={[1, 2]} camera={{ position: [0, 0, 12], fov: 35 }} gl={{ antialias: false }}>
          <color attach="background" args={['#07060D']} />
          <Suspense fallback={null}>
            <Stage intensity={1.5}>
              <Elf />
              <Elf layer={OCCLUSION_LAYER} />
            </Stage>
            <Effects />
          </Suspense>
          {/* <OrbitControls minPolarAngle={Math.PI / 2} enableRotate={true} maxPolarAngle={Math.PI / 2} enableZoom={true} enablePan={true} /> */}
        </Canvas>
      </div>
      <div className='left-content z-50 p-8'>
        <h1 className=" font-light ">Creative Env.</h1>
        <h1 className="mt-48 text-4xl font-normal w-2/3 justify-start">
          Glassmorphism and Three Js are awesome <br /> 
        </h1>
        <h1 className='font-thin mt-8'>Every Creator should understand this.</h1>
        <button className='mt-16 bg-gray-100 text-gray-900 px-6 py-3'>
          check out other designs
        </button>
      </div>

      <div className='calculations-summary absolute top-16 right-16'>
        <div>
          <h1 className='text-center text-4xl font-extrabold' style={{color: '#4B54FB'}}>300+</h1>
          <p className='text-center text-sm font-extralight' style={{color: '#A1BAE6'}}>Websites uses Three Js</p>
        </div>
      </div>

      <div className='calculations-summary absolute top-56 right-16'>
        <div>
          <h1 className='text-center text-4xl font-extrabold' style={{color: '#3A6D8C'}}>120+</h1>
          <p className='text-center text-sm font-extralight' style={{color: '#A1BAE6'}}>Repositories on Github</p>
        </div>
      </div>

      <div className='calculations-summary absolute top-96 right-16'>
        <div>
          <h1 className='text-center text-4xl font-extrabold' style={{color: '#1F4C73'}}>60+</h1>
          <p className='text-center text-sm font-extralight' style={{color: '#A1BAE6'}}>Questions - StackOverflow</p>
        </div>
      </div>

      <div className='calculations-summary absolute top-16 right-16'>
        <div>
          <h1 className='text-center text-4xl font-extrabold' style={{color: '#4B54FB'}}>300+</h1>
          <p className='text-center text-sm font-extralight' style={{color: '#A1BAE6'}}>Websites uses Three Js</p>
        </div>
      </div>

      <div className='mt-32 mb-32'> 
        <h1 className='text-center text-2xl text-white mb-8'>Testimonials</h1>
        <div className='mt-4 font-extralight p-8 text-sm text-center' style={{color: '#A1BAE6'}}>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam feugiat tempor turpis id accumsan. Nullam elementum lorem ut urna lobortis viverra.</p> <br />
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam feugiat tempor turpis id accumsan. Nullam elementum lorem ut urna lobortis viverra.</p><br />
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam feugiat tempor turpis id accumsan. Nullam elementum lorem ut urna lobortis viverra.</p>
        </div>
      </div>

      {/* <Canvas shadows dpr={[1, 2]} camera={{ position: [0, 0, 12], fov: 35 }} gl={{ antialias: false }}>
          <color attach="background" args={['#07060D']} />
          <Suspense fallback={null}>
            <Stage intensity={1.5}>
              <Mashmello />
              <Mashmello layer={OCCLUSION_LAYER} />
            </Stage>
            <Effects />
          </Suspense>
        </Canvas> */}
    </div>
    
  );
}

export default App;
